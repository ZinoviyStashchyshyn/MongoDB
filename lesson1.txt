
////////////////////////////////////////////////////////.find({})///////////////////////////////////////////////////////

// пошук усіх в кого payment 2500//

db.getCollection('teacher').find({ payment: 2500 });
------------------------------------------------------------------------------------------------------------------------

//пошук усіх в кого payment 2500 і class_curator: 6

db.getCollection('teacher').find({
    payment: 2500,
    class_curator: 6
});
------------------------------------------------------------------------------------------------------------------------


//////////////////////////////////////////////////////.insert({})///////////////////////////////////////////////////////

// додаємо  новий об'єкт, з ключами: model,year,price

db.getCollection('teacher').insert({
    model: "Yamaha Fazer",
    year: 2008,
    price: 3000
});
------------------------------------------------------------------------------------------------------------------------


////////////////////////////////////////////////////////.find({})///////////////////////////////////////////////////////

// функція FIND  приймає декілька об'єктів Перший - це об'єкт пошуку, другий - це те, що ми хочемо дістати.
Оскільки по замовчуванню вона віддає всі поля. Через true, або false. певні поля дістаємо, або не дістаємо.

db.getCollection('teacher').find(
        { payment: 2500, class_curator: 6 },
        { name: true, payment: true, _id: false }
);
------------------------------------------------------------------------------------------------------------------------

// цей варіант функції FIND, коли ми працюємо чрез OR, тобто або такий, або такий варіант на підходить.

db.getCollection('teacher').find({
       $or: [
           { payment: 2500 },
           { payment: 2200 },
           { class_curator: 6 }
       ]
});
------------------------------------------------------------------------------------------------------------------------

// цей варіант функції FIND, коли ми працюємо чрез and, тобто: строго такий і строго такий варіант на підходить.
   Це потрібно для більш складних запитів.

db.getCollection('teacher').find({
       $and: [
           { payment: 2500 },
           { class_curator: 6 }
       ]
});
------------------------------------------------------------------------------------------------------------------------

// шукаємо усіх в кого ім'я починається (^o) на  о, при цьому за допоиогою i ігноруємо велику та малу букву.

db.getCollection('teacher').find({ name: /^o/i })
------------------------------------------------------------------------------------------------------------------------

// шукаємо усіх в кого ім'я закінчується (vna$)  на  vna, при цьому за допоиогою i ігноруємо велику та малу букву.

db.getCollection('teacher').find({ name: /vna$/i })
------------------------------------------------------------------------------------------------------------------------

// шукаємо усіх в кого ім'я містить (.*iv.*)  iv, при цьому за допоиогою i ігноруємо велику та малу букву.

db.getCollection('teacher').find({ name: /.*iv.*/i })
------------------------------------------------------------------------------------------------------------------------

/////////////////////////////////////////////////.find({}).sort({})/////////////////////////////////////////////////////

// перше шукаємо, а потім сортуємо в порядку спадання payment: -1, та name: -1 (в алфавітному порядку!!!)

db.getCollection('teacher').find({}).sort({ payment: -1, name: -1 });
------------------------------------------------------------------------------------------------------------------------

/////////////////////////////////////////////////.find({}).limit().skip()///////////////////////////////////////////////

// перше шукаємо, а потім сортуємо в порядку спадання payment: -1, limit на сторінку покаже лтше 3,
   skip - пропустить шість і почне працювати з сьомого.

db.getCollection('teacher').find({}).sort({ payment: -1 }).limit(3).skip(6);
------------------------------------------------------------------------------------------------------------------------

/////////////////////////////////////////////////.find({}), >=, <=, <, >, !=, ===///////////////////////////////////////

db.getCollection('teacher').find({
        payment: {
//              $gte: 2500         // >=
//              $lte: 2500        // <=
//              $lt: 2500        // <
//              $gt: 2500       // >
//              $ne: 2500      // !=
//              $eq: 2500     // ===
        }
});
------------------------------------------------------------------------------------------------------------------------

/////////////////////////////////////////////////.find({$in:{[7,8,9]}})/////////////////////////////////////////////////


// шукаємо всіх в кого class_curator: 7,8,9

db.getCollection('teacher').find({
        class_curator: {
            $in: [7, 8, 9]
        }
});
------------------------------------------------------------------------------------------------------------------------

/////////////////////////////////////////////////.find({$nin:{[7,8,9]}})////////////////////////////////////////////////

// шукаємо всіх в кого class_curator  не : 7,8,9

db.getCollection('teacher').find({
        class_curator: {
            $nin: [7, 8, 9]
        }
});
------------------------------------------------------------------------------------------------------------------------

/////////////////////////////////////////////////.find({$not:{$nin:[7,8,9]}}})//////////////////////////////////////////

// той варіант, коли ми знаємо лише дані котрі нам не підходять.
//  те саме, що $in:[7,8,9]

db.getCollection('teacher').find({
        class_curator: {
            $not: {
              $nin: [7, 8, 9]
            }
        }
});
------------------------------------------------------------------------------------------------------------------------

/////////////////////////////////////////////////.update({})////////////////////////////////////////////////////////////

// має три об'єкта

db.getCollection('teacher').update(
    {}, // FIND  кого
    {}, // UPDATE  що
    {}  // OPTIONS
);
------------------------------------------------------------------------------------------------------------------------

// оновлюємо певному обєкту payment, але виходить, що ми його перезаписуємо!!!!! Відповідно ламаємо!

db.getCollection('teacher').update(
    { _id: ObjectId("61176d106279a96d5004093f") },
    { payment: 3500 }
);
------------------------------------------------------------------------------------------------------------------------


/////////////////////////////////////////////////.update({},{$set:{}})//////////////////////////////////////////////////

// оновлюємо обєкт, при цьому вставляємо йому поле cars ПЕРШОМУ !!!!

db.getCollection('teacher').update(                    // це старий варіант з мульті
    { payment: { $lte: 2500 } },
    { $set: { cars: ["Mazda", "Volga"] } },
    { multi: true }
);

// ВСІМ !!!

db.getCollection('teacher').updateMany(               //  краще новіше!!!!
    { payment: { $lte: 2500 } },
    { $set: { cars: ["Mazda", "Volga"] } }
);
------------------------------------------------------------------------------------------------------------------------


/////////////////////////////////////////////////.find({})//////////////////////////////////////////////////////////////

// шукаємо всіх в кого три авто

db.getCollection('teacher').find({ cars: { $size: 3 } });
------------------------------------------------------------------------------------------------------------------------

// шукаємо всіх в кого немає машини

db.getCollection('teacher').find({ cars: { $exists: false } });
------------------------------------------------------------------------------------------------------------------------

// шукаємо всіх в кого авто BMW

db.getCollection('teacher').find({ cars: 'BMW' });
------------------------------------------------------------------------------------------------------------------------


/////////////////////////////////////////////////.update({})////////////////////////////////////////////////////////////

// шукаємо в кого одна машина і додаємо першому (бо не Many) машину VOLVO в масиві

db.getCollection('teacher').update(
  { cars: { $size: 1 } },
  { $set: { 'cars.$[]' : 'Volvo' } }
------------------------------------------------------------------------------------------------------------------------

// шукаємо в кого  одна машина є ОБЄКТОМ В МАСИВІ І ДОДАЄМО ПОЛЕ PRICE 9999 ОБЄКТ !!!

db.getCollection('teacher').updateMany(
 { cars: { $size: 1 } },
  { $set: { 'cars.$[].price' : '99999' } }
);
------------------------------------------------------------------------------------------------------------------------

// шукаємо в кого поле масиву є обєктом з значенням 'cars.model' : 'XC90'  !!!  Обєкт тільки такий спосіб доступу

db.getCollection('teacher').find({ 'cars.model' : 'XC90' })
------------------------------------------------------------------------------------------------------------------------

// шукаємо всіх в кого в масиві під другим індексом авто BMW . БУТИ УВАЖНИМ ДО СИНТАКСИСУ!!!!!!

db.getCollection('teacher').find({ 'cars.2' : 'BMW' })
------------------------------------------------------------------------------------------------------------------------


/////////////////////////////////////////////////.remove({})////////////////////////////////////////////////////////////

// видаляємо обєкт в якого поле Yamaha Fazer

db.getCollection('teacher').remove({model:"Yamaha Fazer"});
------------------------------------------------------------------------------------------------------------------------



///////////////////////////////////////////////// IMPORT JSON TO MONGO /////////////////////////////////////////////////


mongoimport --db DZ --collection rest --file restaurants.json це для убунта або мак
);

                                           WINDOWS  через mongoCompass відео aprill-2021  (1.25хв - 1.30хв)
------------------------------------------------------------------------------------------------------------------------

                                                    AGGREGATE

/////////////////////////////////////////////////.aggregate([{},{},{},{}])//////////////////////////////////////////////

db.getCollection('teacher').aggregate([
  {},
  {},
  {},
  {},
  {}
]);
------------------------------------------------------------------------------------------------------------------------


                                                    $groupe:{} - групує.

/////////////////////////////////////////////////.aggregate([{$group:{}}])//////////////////////////////////////////////


// групуємо по зарплаті, рахуємо викладачів з такою зарплатою.

db.getCollection('teacher').aggregate([
    {
        $group: {
                _id: "$payment",             // обовязко даємо _id,  та знак $, це дає розуміння по чому ми групуємо
                countOfTeachers: {
                       $sum: 1               // прописуємо ключ countOfTeachers, функція $sum рахує скіль викладачів з
                }                               відповідною зарплатою
          }
    }
]);
------------------------------------------------------------------------------------------------------------------------


                                                  $project:{} - записує поля, додає, приховує поля.

/////////////////////////////////////////////////.aggregate([{$project:{}}])////////////////////////////////////////////

// групуємо по зарплаті, рахуємо викладачів з такою зарплатою, сортуємо в порядку зростання кількості вчителів до відповідної зарплати.
Функцією project переіменовуємо id, відображаємо каунтер і виключаємо _id, вона ще може додавати поля

db.getCollection('teacher').aggregate([
    {
        $group: {
                _id: "$payment",              // обовязко даємо _id,  та знак $, це дає розуміння по чому ми групуємо
                countOfTeachers: {
                       $sum: 1                // прописуємо ключ countOfTeachers, функція $sum рахує скіль викладачів з
                }                                відповідною зарплатою
          }
    },
    {
          $sort: {
                countOfTeachers: 1            // сортуємо в порядку зростання значення
           }
     },
     {
            $project: {
                    money: "$_id",             // заводемо значення payment у ключ змінну money
                    countOfTeachers: 1,        // відображаємо countOfTeachers, оскільки $projectб його перезатер
                    _id: 0                     // приховуємо поле _id: 0, в котрому відображалось $payment
             }
      }
]);
------------------------------------------------------------------------------------------------------------------------


                                                  $lookup:{} - приєднання

///////////////////////////////////////////////// aggregate([{$lookup:{}}]) ////////////////////////////////////////////


db.getCollection('teacher').aggregate([
    {
        $lookup: {
               from: "students",               // приєднуємо students до teacher, /from - це вибірка з якоїсь БД в нашому порівння полів нашої БД teacher з БД students
               localField: "class_curator",    // приєднуємо в teacher, в поле class_curator / пошук по конкретному полі class_curator НОШОЇ ПОТОЧНОЇ БД
               foreignField: "class",          // що приєднюємо, а саме клас що співпадають /пошук по конкретному полі class ПОРІВНЮВАНОЇ  БД
               as: "zabriki"                   // приєднюємо обєкти що співпали під назвою zabriki / добавляємо поле нашій БД teacher під назвою zabriki де буде весь порівнюваний ОБЄКТ з students по ключі class
                 }
         }
])
------------------------------------------------------------------------------------------------------------------------

///////////////////////////////////////////////// $match:{} ////////////////////////////////////////////////////////////

                                               пошукова агрегація


db.getCollection('teacher').aggregate([
    {
           $match: {                                 // в кого class_curator: { $exists: true }
                class_curator: { $exists: true }
           }
    },
    {
            $lookup: {                               // приєднання
                    from: "students",
                    localField: "class_curator",
                    foreignField: "class",
                    as: "zabriki"
             }
     },
     {
            $match: {                                // пошук "zabriki.name": "Bob"
                 "zabriki.name": "Bob"
            }
     }
]);
------------------------------------------------------------------------------------------------------------------------


///////////////////////////////////////////////// $unwind:{} ///////////////////////////////////////////////////////////

                                               Розкриває масив записів ()

db.getCollection('teacher').aggregate([
    {
           $match: {                                                 // в кого class_curator: { $exists: true }
                class_curator: { $exists: true }
           }
    },
    {
            $lookup: {                                              // приєднання
                    from: "students",
                    localField: "class_curator",
                    foreignField: "class",
                    as: "zabriki"
             }
     },
     {
            $match: {
                 "zabriki.name": "Bob"                              // пошук "zabriki.name": "Bob"
            }
     },
     {
            $unwind: "$zabriki"                                    // розкриває масив і робить поокремо, присвоючи id
     }
])
------------------------------------------------------------------------------------------------------------------------

                                                 приклад unwind
     {
            name: "Mariia",
            students: ["Antor", "Vika", "Vova", "Khry"]
     }
      ///////////////////

     {
         name: "Mariia",
         students: "Antor"
     },
     {
         name: "Mariia",
         students: "Vika"
     },
     {
         name: "Mariia",
         students: "Vova"
     },
     {
         name: "Mariia",
         students: "Khry"
     },


///////////////////////////////////////////////// $group:{} ///////////////////////////////////////////////////////////


db.getCollection('teacher').aggregate([
    {
         $group: {
                _id: 0,
                maxPay: { $max: "$payment" },      // максимальна заплата
                minPay: { $min: "$payment" },
                avgPay: { $avg: "$payment" },
                sumPay: { $sum: "$payment" },
                count:  { $sum: 1 },                //кількість полів зарплати
         }
     }
]);

///////////////////////////////////////////////// $count:{} ///////////////////////////////////////////////////////////

db.getCollection('teacher').aggregate([
     {
           $match: {
                cars: 'Mazda'
           }
     },
     { $count: "teachers_with_Mazda" }
])
